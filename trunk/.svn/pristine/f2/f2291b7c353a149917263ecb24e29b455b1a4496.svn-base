/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bks.fachlogik.kundesteuerung.impl;
import bks.datenhaltung.bksdbmodel.entities.Konto;
import bks.datenhaltung.bksdbmodel.entities.Kunde;
import bks.datenhaltung.bksdbmodel.entities.Ueberweisung;
import bks.datenhaltung.bksdbmodel.impl.IDatabaseImpl;
import bks.datenhaltung.kontodaten.impl.IKontoServiceImpl;
import bks.fachlogik.kundesteuerung.grenz.KundeGrenz;
import bks.fachlogik.kundesteuerung.grenz.UeberweisungGrenz;
import bks.fachlogik.kundesteuerung.services.IUeberweisungSteuerung;
import java.util.List;
import javax.persistence.EntityManager;

/**
 *
 * @author Barthy
 */
public class IUeberweisungSteuerungImpl implements IUeberweisungSteuerung {
    
    private final IKontoServiceImpl kontoService = new IKontoServiceImpl();
    private final KundeGrenz kunde = IActivateComponentImpl.getUser();
    
    public void IUeberweisungSteuerung(){
        IDatabaseImpl database = new IDatabaseImpl();
        EntityManager entityManager = database.getEntityManager();
        this.kontoService.setEntityManager(entityManager);
    }

    @Override
    public Ueberweisung getUeberweisung(int uvid) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Ueberweisung> getAlleUeberweisungen() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Ueberweisung> getStornierbareUeberweisungen() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    // added parameter
    public boolean ueberweisungErfassen(UeberweisungGrenz uGrenz) {
        Ueberweisung ueberweisung = new Ueberweisung();
        Konto vonKonto = this.kontoService.getKontoByID(uGrenz.getVonkonto());
        Konto anKonto = this.kontoService.getKontoByID(uGrenz.getZukonto());
        
        if(vonKonto == null){
            throw new RuntimeException("Abbuchungskonto nicht gefunden.");
        }
        
        if(anKonto == null){
            throw new RuntimeException("Zielkonto nicht gefunden.");
        }
        
        if(vonKonto.getKunde().getKid() != this.kunde.getKid()){
            throw new RuntimeException("Das angegebene Abbuchungskonto ist keines Ihrer Konten.");
        }
        
        ueberweisung.setBetrag(uGrenz.getBetrag());
        ueberweisung.setVerwendungszweck(uGrenz.getVerwendungszweck());
        ueberweisung.setDatum(uGrenz.getDatum());
        ueberweisung.setVonkonto(vonKonto);
        ueberweisung.setZukonto(anKonto);
        
        ueberweisung.setKunde(vonKonto.getKunde());
        this.kontoService.ueberweisungErfassen(ueberweisung);
        
        return true;
    }

    @Override
    public boolean ueberweisungStornieren(int ubid) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public UeberweisungGrenz ueberweisungAuswaehlen(int ubid) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
